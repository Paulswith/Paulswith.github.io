<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Paulswith·__dobby&#39;s Blogs</title>
  
  <subtitle>I just wanna improve myself.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-17T03:17:10.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Paulswith __dobby</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>clutch对app进行砸壳</title>
    <link href="http://yoursite.com/2017/11/17/clutch%E5%AF%B9app%E8%BF%9B%E8%A1%8C%E7%A0%B8%E5%A3%B3/"/>
    <id>http://yoursite.com/2017/11/17/clutch对app进行砸壳/</id>
    <published>2017-11-17T01:55:29.000Z</published>
    <updated>2017-11-17T03:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>逆向学习相关,实战一下对app的砸壳,砸壳必须要越狱手机哦.</p></blockquote><h3 id="什么是壳"><a href="#什么是壳" class="headerlink" title="什么是壳"></a>什么是壳</h3><p>一个App无论是Android还是ios, 或者是PC平台, 为了保护app都会加上一层壳, 加壳的app可能无法被一些IDA之类的工具解析, 那么也就无法搞事情,所以砸壳是必须走的一步,也可以从某助手平台下载已砸壳的, 当然最好用下面的命令确认下先.<br>怎么查看一个app是否有壳, 可以使用下面的命令, 替换为App的二进制文件查看:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">otool -l targetBinary | grep cryptid</div></pre></td></tr></table></figure></p><blockquote><p>得到的结果如果是1则是未砸壳的, 0是已砸壳.<br>还有一种情况是一些App支持多种架构的,可能会展示多个cryptid=1/0, 在哪个平台跑就砸哪个.</p></blockquote><h3 id="确定目标后安装App"><a href="#确定目标后安装App" class="headerlink" title="确定目标后安装App"></a>确定目标后安装App</h3><p>我这里以麦当劳App(听说改名金拱门)为例,从appStore下载安装.</p><h3 id="编译clutch二进制文件"><a href="#编译clutch二进制文件" class="headerlink" title="编译clutch二进制文件"></a>编译clutch二进制文件</h3><p>clutch神器<a href="https://github.com/KJCracks/Clutch" target="_blank" rel="external">下载地址</a>, 下载编译后允许会得到一个二进制文件, 这里不累述哈, 或者你可以直接从我的<a href="https://github.com/Paulswith/ToolsScript" target="_blank" rel="external">git地址</a>clone我编译后的,在clutch_binary文件下.</p><h3 id="拷贝clutch到设备"><a href="#拷贝clutch到设备" class="headerlink" title="拷贝clutch到设备"></a>拷贝clutch到设备</h3><h4 id="连接手机"><a href="#连接手机" class="headerlink" title="连接手机"></a>连接手机</h4><p><img src="/2017/11/17/clutch对app进行砸壳/remote.png" alt=""><br>我这里用iproxy从22映射到2222端口,并整个过程保持. 右边线尝试登录下,默认密码是alpine, 其他情况就自行谷歌帮助,我相信这没什么难度.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iproxy 2222 22</div></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@localhost -p 2222</div></pre></td></tr></table></figure><p>测试连接成功后输入 <code>exit</code> 退出,接着下一步</p><h4 id="scp拷贝到手机"><a href="#scp拷贝到手机" class="headerlink" title="scp拷贝到手机"></a>scp拷贝到手机</h4><p>scp(secure copy) 支持ssh协议远程拷贝, 我们用它拷贝到设备上, 前提是上面的<br>的测试成功了.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp -P 2222 ./clutch root@localhost:/usr/bin/</div></pre></td></tr></table></figure></p><p><img src="/2017/11/17/clutch对app进行砸壳/copyto.png" alt=""><br>如果这样子的话就成功了, /usr/bin/默认已经在环境变量查找内, 拷贝到这里可以省事很多多.</p><h4 id="找到目标"><a href="#找到目标" class="headerlink" title="找到目标"></a>找到目标</h4><p>先介绍下clutch用法:<br><img src="/2017/11/17/clutch对app进行砸壳/usafe.png" alt=""><br>推荐<code>ios-deploy -B</code>可以获取bundleID, <code>brew install ios-deploy</code>就可以安装了.<br><img src="/2017/11/17/clutch对app进行砸壳/searchBD.png" alt=""><br>例如我这里的目标是麦当劳app, 尝试搜一下<code>mc</code>,果不其然就是它了.<br>拿到的bundleID就是<code>com.mcdonalds.gma</code><br>(嗯, 还有个grep的方法更简单,但是我真的不知道它是麦当劳, 因为他显示的是Arch,所以靠谱的话就还是上面,BundleID基本会跟名称一直吧)<br><img src="/2017/11/17/clutch对app进行砸壳/nofound.png" alt=""></p><h4 id="开始砸壳"><a href="#开始砸壳" class="headerlink" title="开始砸壳"></a>开始砸壳</h4><p>连接设备<code>ssh root@localhost -p 2222</code><br>进入命令行后输入:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clutch -b com.mcdonalds.gma</div></pre></td></tr></table></figure></p><p><img src="/2017/11/17/clutch对app进行砸壳/succeed.png" alt=""><br>看到这样子的情况的话就是成功了,注意这里粉红色部分, 还给出了砸成功之后的存储路径,我们拷贝下它</p><h4 id="把成果拿到本地验证"><a href="#把成果拿到本地验证" class="headerlink" title="把成果拿到本地验证"></a>把成果拿到本地验证</h4><p>方法有很多, 例如用ifunbox打开上面的路径,直接拿出来, 但是我的9.3.5的没有办法在Ifunbox查看系统目录, 所以用下路的这个方法<br><img src="/2017/11/17/clutch对app进行砸壳/getzip.png" alt=""><br>–&gt; 就是压缩然后scp到本地</p><h3 id="验收"><a href="#验收" class="headerlink" title="验收"></a>验收</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">otool -l tagerBinary | grep cryptid</div></pre></td></tr></table></figure><p><img src="/2017/11/17/clutch对app进行砸壳/6.png" alt=""><br>意料之中的cryptid=0<br>为啥只显示一个,因为它只有一个架构<code>arm_v7</code></p><p><code>[后面的话把逆向的轮子方法一并列出]</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;逆向学习相关,实战一下对app的砸壳,砸壳必须要越狱手机哦.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;什么是壳&quot;&gt;&lt;a href=&quot;#什么是壳&quot; class=&quot;headerlink&quot; title=&quot;什么是壳&quot;&gt;&lt;/a&gt;什么是壳&lt;/h3&gt;
      
    
    </summary>
    
      <category term="reverseEngineering" scheme="http://yoursite.com/categories/reverseEngineering/"/>
    
    
      <category term="砸壳" scheme="http://yoursite.com/tags/%E7%A0%B8%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>小tip之mac动态背景</title>
    <link href="http://yoursite.com/2017/11/16/%E5%B0%8Ftip%E4%B9%8Bmac%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF/"/>
    <id>http://yoursite.com/2017/11/16/小tip之mac动态背景/</id>
    <published>2017-11-16T12:16:58.000Z</published>
    <updated>2017-11-16T13:41:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作为一个mac粉, 动态背景怎么能少,现在分享一个小tip,有兴趣的往下看</p></blockquote><h3 id="app安装"><a href="#app安装" class="headerlink" title="app安装"></a>app安装</h3><p>其实事情是一款App就可以搞定了, 但是好像国内搜不到, 我把它压缩传到了我的github上,你可以clone git, 然后在DymaticWallpaper里面找到它,解压并安装即可.<br>git 地址: <a href="https://github.com/Paulswith/ToolsScript.git" target="_blank" rel="external">https://github.com/Paulswith/ToolsScript.git</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>安装后, 在屏幕上上方的状态栏可以看到它, 选择点击下载即可, 但它的资源真的很糟糕 </p><ul><li>主要是分辨率太低</li><li>没有对比就没有伤害,对比我待会给你讲的这些资源它真的很逊</li><li>处女座就是挑,大佬们,我说的是我…</li></ul><h3 id="用最酷的视频替换它"><a href="#用最酷的视频替换它" class="headerlink" title="用最酷的视频替换它"></a>用最酷的视频替换它</h3><p><a href="http://a1.phobos.apple.com/us/r1000/000/Features/atv/AutumnResources/videos/entries.json" target="_blank" rel="external">点我跳转到视频源地址</a><br>我在一篇<a href="https://paulswith.github.io/2017/11/16/mac%E4%B8%8A%E7%9A%84Mysql%E8%B8%A9%E5%9D%91%E8%AE%B0/" target="_blank" rel="external">博文</a>中还针对它进数据库存储,因为真是稀缺~ 似乎一段时间还会更新一次, 资源的贡献者是国外的一位大牛<a href="https://github.com/JohnCoates/Aerial" target="_blank" rel="external">johnCoates</a>.<br>可能他的作品是可以用的,但是一直有问题,才用这个app替代.</p><h4 id="选取视频并下载"><a href="#选取视频并下载" class="headerlink" title="选取视频并下载"></a>选取视频并下载</h4><p><img src="/2017/11/16/小tip之mac动态背景/url.png" alt=""><br>浏览器打开下载到本地</p><h4 id="执行替换"><a href="#执行替换" class="headerlink" title="执行替换"></a>执行替换</h4><p>改名为1.mp4(严格大小写),拖到LiveDesktopPro的这个路径,例如我:<br><code>/Applications/LiveDesktop Pro.app/Contents/Resources</code><br><img src="/2017/11/16/小tip之mac动态背景/path.png" alt=""><br>需要权限,输入确认即可<br>一共允许1,2,3,4个文件替换, 依然是改为.mp4的后缀, 不管方法土不土,就是可行.<br>现在重进打开App,选择视频1,即可看到刚才视频了.</p><p>没有找到好的gif转换软件, png将就,这是我选的视频,白天黑夜都使用.<br><img src="/2017/11/16/小tip之mac动态背景/bg.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作为一个mac粉, 动态背景怎么能少,现在分享一个小tip,有兴趣的往下看&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;app安装&quot;&gt;&lt;a href=&quot;#app安装&quot; class=&quot;headerlink&quot; title=&quot;app安装&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="macTools" scheme="http://yoursite.com/categories/macTools/"/>
    
    
      <category term="macTools" scheme="http://yoursite.com/tags/macTools/"/>
    
  </entry>
  
  <entry>
    <title>mac上的Mysql踩坑记</title>
    <link href="http://yoursite.com/2017/11/16/mac%E4%B8%8A%E7%9A%84Mysql%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/16/mac上的Mysql踩坑记/</id>
    <published>2017-11-16T12:05:35.000Z</published>
    <updated>2017-11-16T13:21:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前对一个动态背景的接口进行存储处理, 依然是选择mysql存储, 本想着很简单的事情,却在安装的时候各种坑, 所以依然mark下.</p></blockquote><h3 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h3><p>我选择的是<a href="https://dev.mysql.com/downloads/cluster/" target="_blank" rel="external">MySQL Cluster</a>,community的都是个人使用免费的,还真没具体看什么区别.</p><h3 id="匹配环境"><a href="#匹配环境" class="headerlink" title="匹配环境"></a>匹配环境</h3><p><img src="/2017/11/16/mac上的Mysql踩坑记/env.png" alt=""><br>需要将这个加入到环境里面, 后面安装MySQLDB的时候也需要这个环境的支持的.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=/usr/local/mysql/bin:$PATH</div></pre></td></tr></table></figure><h3 id="安装后登录密码"><a href="#安装后登录密码" class="headerlink" title="安装后登录密码"></a>安装后登录密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root</div></pre></td></tr></table></figure><p>99%的情况你这样子直接登录就出问题了, 原因是密码不知道.<br>我的解决方法是:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mysqld_safe --skip-grant-tables&amp;</div></pre></td></tr></table></figure><p>这时候再:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root mysql</div></pre></td></tr></table></figure><h3 id="python安装MySQLdb"><a href="#python安装MySQLdb" class="headerlink" title="python安装MySQLdb"></a>python安装MySQLdb</h3><p>使用python操作mysql的时候需要一个库叫做<code>MySQLdb</code>,坑的是安装的时候, 原因是不知道它具体在pip 安装是什么名字的, 一直用MySQLdb怎么也找不到. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install mysql-python</div></pre></td></tr></table></figure><p>是的,没了.就这样子就可以了. </p><h3 id="python操作mysql"><a href="#python操作mysql" class="headerlink" title="python操作mysql"></a>python操作mysql</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line">__author = <span class="string">'dobby 2017.11.2'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> simplejson <span class="keyword">as</span> json</div><div class="line"><span class="keyword">import</span>  MySQLdb</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#step ------------------------connect mysql----------------</span></div><div class="line">db = MySQLdb.connect(host=<span class="string">'localhost'</span>,port=<span class="number">3306</span>,</div><div class="line">                     user=<span class="string">'root'</span>, db=<span class="string">'owner'</span>, charset=<span class="string">'utf8'</span>)   </div><div class="line">                    <span class="comment"># 打开数据库连接,我是没有密码的连接</span></div><div class="line">cursor = db.cursor()      </div><div class="line"><span class="comment"># 使用cursor()方法获取操作游标,因为这是一个c的api, 后面的操作都是基于这个指针</span></div><div class="line">cursor.execute(<span class="string">'show tables'</span>)        </div><div class="line"><span class="comment">#只是全部的执行方法</span></div><div class="line">data = cursor.fetchone()                </div><div class="line"><span class="comment">#这个命令能拿到上条执行方法后的返回值 ,类似os.read()吧</span></div><div class="line"><span class="keyword">print</span> data</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#step ------------------------get  data----------------</span></div><div class="line">session = requests.session()</div><div class="line">req =session.get(<span class="string">'http://a1.phobos.apple.com/us/r1000\</span></div><div class="line"><span class="string">                 /000/Features/atv/AutumnResources/videos/entries.json'</span>)</div><div class="line"><span class="keyword">if</span> req.content <span class="keyword">and</span> int(req.status_code) == <span class="number">200</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'get all data succeed.'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#step -----------------------handler data-------------</span></div><div class="line">api_data_list = json.loads(req.content)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">for</span> dict_data <span class="keyword">in</span> api_data_list:</div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> dict_data[<span class="string">'assets'</span>]:</div><div class="line">            <span class="comment"># 生成mysql数据写入的sql语句</span></div><div class="line">            sql = <span class="string">"INSERT INTO wallpaper values('&#123;a&#125;','&#123;b&#125;','&#123;c&#125;','&#123;d&#125;','&#123;e&#125;')"</span>.\</div><div class="line">                format(a=item[<span class="string">'url'</span>],b=item[<span class="string">'accessibilityLabel'</span>],c=item[<span class="string">'type'</span>],</div><div class="line">                       d=item[<span class="string">'id'</span>],e=item[<span class="string">'timeOfDay'</span>])</div><div class="line">            <span class="comment"># 执行语句</span></div><div class="line">            cursor.execute(sql)</div><div class="line">            data = cursor.fetchone()</div><div class="line">            <span class="keyword">print</span> data</div><div class="line">        <span class="comment"># ******这是重点, 必须对数据进行总提交</span></div><div class="line">        db.commit()</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    db.rollback() <span class="comment">#避免出现中断的情况, 如果有就回滚</span></div><div class="line">db.close()  <span class="comment">#关闭数据库,避免数据丢失....</span></div></pre></td></tr></table></figure><blockquote><p>坑之类代码都在里面了, 就这样子吧,好像没什么料,主要还是mark下….</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;之前对一个动态背景的接口进行存储处理, 依然是选择mysql存储, 本想着很简单的事情,却在安装的时候各种坑, 所以依然mark下.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装Mysql&quot;&gt;&lt;a href=&quot;#安装Mysql&quot; cla
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>ios重签名脚本的0到1</title>
    <link href="http://yoursite.com/2017/11/14/ios%E9%87%8D%E7%AD%BE%E5%90%8D%E8%84%9A%E6%9C%AC%E7%9A%840%E5%88%B01/"/>
    <id>http://yoursite.com/2017/11/14/ios重签名脚本的0到1/</id>
    <published>2017-11-14T12:03:21.000Z</published>
    <updated>2017-11-14T13:41:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对重签名脚本进行了规范的踩坑 , 挤出一个微笑后写下这篇博文<br>感谢Google, 感谢我生涩的swift 之阅读IosAppResigner源码</p></blockquote><h3 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h3><p><img src="/2017/11/14/ios重签名脚本的0到1/sign_profile.png" alt=""></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./resign.sh /Users/dobby/Desktop/微信-已砸壳.ipa  /Users/dobby/Desktop/original.mobileprovision  com.weixin.resign</div></pre></td></tr></table></figure><ul><li>$1 需要砸壳过的ipa,从PP助手下载即可</li><li>$2 .mobileprovision 这个是证书对应的文件,也可以指定证书Xcode的product下也会生成</li><li>$3 是否修改bundleID,默认是原先的</li></ul><p><img src="/2017/11/14/ios重签名脚本的0到1/signstr.png" alt=""></p><blockquote><p>脚本内部需要写入一个一个签名字符串,可以通过下方的命令拿到<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">security find-identity -v -p codesigning</div></pre></td></tr></table></figure></p><p>若是cryptid显示为0,非砸壳为1. 砸壳虽不影响签名的成功率, 但是我试了下可安装,但不可使用. 可google下砸壳方法自行砸壳.下面是查看cryptid的命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">otool -l ./腾讯手机管家-来电防骚扰的QQ安全助手\(正版\)/Payload/MQQSecure.app/MQQSecure | grep cryptid</div></pre></td></tr></table></figure></p></blockquote><h3 id="mobileProvision生成Entitlements-plist"><a href="#mobileProvision生成Entitlements-plist" class="headerlink" title="mobileProvision生成Entitlements.plist"></a>mobileProvision生成Entitlements.plist</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">security cms -D -i $provision &gt; ProvisionProfile.plist </div><div class="line">/usr/libexec/PlistBuddy -x -c "Print Entitlements" ProvisionProfile.plist &gt; $tempPlace/Entitlements.plist</div></pre></td></tr></table></figure><p>用该方法生成一个Entitlements.plist文件,之前还没找到这么快捷的生成方法, 有个土方法自己折腾出来的也是可行的,详见<a href="https://paulswith.github.io/2017/11/14/plist%E6%96%87%E4%BB%B6-%E5%9C%A8%E8%84%9A%E6%9C%AC%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C/" target="_blank" rel="external">plist文件-在脚本中的操作</a></p><h3 id="mobileProvision拷贝为embedded-mobileprovision"><a href="#mobileProvision拷贝为embedded-mobileprovision" class="headerlink" title="mobileProvision拷贝为embedded.mobileprovision"></a>mobileProvision拷贝为embedded.mobileprovision</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp $provision $appPlace/embedded.mobileprovision</div></pre></td></tr></table></figure><h3 id="是否概要更改BundleID"><a href="#是否概要更改BundleID" class="headerlink" title="是否概要更改BundleID"></a>是否概要更改BundleID</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if [[ $3 ]]; then</div><div class="line">plutil -replace CFBundleIdentifier -string "$3" $appPlace/Info.plist</div><div class="line">reBundleID=`plutil -p $appPlace/Info.plist | grep 'CFBundleIdentifier' `</div><div class="line">echo "Log info : you wanna replace to: $&#123;reBundleID&#125;"</div><div class="line">fi</div></pre></td></tr></table></figure><p>默认的时候是原先的, BundleID安装到设备上是唯一的,若是原版本共存,必须要更改</p><h3 id="删除影响签名文件"><a href="#删除影响签名文件" class="headerlink" title="删除影响签名文件"></a>删除影响签名文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">plutil -remove CFBundleREsourceSpecification $appPlace/Info.plist   #删除签名源文件相关</div><div class="line">rm -rf $appPlace/Watch  #发现watch插件必现失败,这个必须删除了</div><div class="line">rm -rf $appPlace/PlugIns #发现PlugIns插件必现失败,这个必须删除了,就算下面重签也不管的, 坑超多</div><div class="line">codesignInfo=`find $appPlace -name "CodeResources" `</div><div class="line">for i in $codesignInfo; do</div><div class="line">rm -f $i</div><div class="line">done</div></pre></td></tr></table></figure><ul><li>对Info.plist里面的CFBundleREsourceSpecification这个key删除,具体不知道做了什么,IosAppSigner也这么做了</li><li>Watch和Plugins这两个文件,我曾试过对他们都进行重签名, 但依然不管用, 相关坑大概是独立性,可以跳转到<a href="https://nianxi.net/ios/dump-decrypted-ios-app-extensions.html" target="_blank" rel="external">念茜女神</a>的博文了解</li><li>源文件的_CodeSignature/CodeResources也进行了全局删除,签名后会自动生成这个文件</li></ul><h3 id="开始重签"><a href="#开始重签" class="headerlink" title="开始重签"></a>开始重签</h3><h4 id="第一步-相关lib-framework签名"><a href="#第一步-相关lib-framework签名" class="headerlink" title="第一步,相关lib-framework签名"></a>第一步,相关lib-framework签名</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">allShouldSign=` find $appPlace -name "*.appex" &amp;&amp; find $appPlace  -name "*.framework" &amp;&amp; find $appPlace  -name "*.dylib" &amp;&amp; find $appPlace/* -name "*.app" ` #最上层的先不签</div><div class="line">for i in $allShouldSign; do</div><div class="line">codesign -fs "$&#123;signStr&#125;" --no-strict --entitlements=/tmp/project_resign/Entitlements.plist $i</div><div class="line">done</div></pre></td></tr></table></figure><ul><li>对上方类型都进行一篇搜索,得到绝对路径后进行重签名<br><img src="/2017/11/14/ios重签名脚本的0到1/type.png" alt=""><blockquote><p>这是iosAppResigner中,作者对着全部的类型都检索了一遍,我并完全覆盖,如果你踩到了坑,可以试试把类型都加上</p></blockquote></li></ul><h4 id="核心包签名"><a href="#核心包签名" class="headerlink" title="核心包签名"></a>核心包签名</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">codesign -vvv -fs "$signStr" --no-strict --entitlements=/tmp/project_resign/Entitlements.plist $appPlace</div></pre></td></tr></table></figure><h3 id="打包为ipa"><a href="#打包为ipa" class="headerlink" title="打包为ipa"></a>打包为ipa</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd $tempPlace</div><div class="line">zip -qry sign.ipa ./Payload</div><div class="line">mv $tempPlace/sign.ipa ~/Desktop</div></pre></td></tr></table></figure><ul><li>因为打包的时候是递归形式的, 指定绝对路径会踩坑,注意就行</li></ul><h3 id="安装试试"><a href="#安装试试" class="headerlink" title="安装试试"></a>安装试试</h3><p><img src="/2017/11/14/ios重签名脚本的0到1/install.png" alt=""></p><p><a href="https://github.com/Paulswith/ToolsScript/tree/master/iosResign" target="_blank" rel="external">- - -附源码github链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;对重签名脚本进行了规范的踩坑 , 挤出一个微笑后写下这篇博文&lt;br&gt;感谢Google, 感谢我生涩的swift 之阅读IosAppResigner源码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Profile&quot;&gt;&lt;a href=&quot;#Pro
      
    
    </summary>
    
      <category term="unix" scheme="http://yoursite.com/categories/unix/"/>
    
    
      <category term="iosDev" scheme="http://yoursite.com/tags/iosDev/"/>
    
  </entry>
  
  <entry>
    <title>plist文件-在脚本中的操作</title>
    <link href="http://yoursite.com/2017/11/14/plist%E6%96%87%E4%BB%B6-%E5%9C%A8%E8%84%9A%E6%9C%AC%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/11/14/plist文件-在脚本中的操作/</id>
    <published>2017-11-14T11:30:39.000Z</published>
    <updated>2017-11-14T12:03:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>背景是写一个自动签名的脚本, 真的是从0到1的踩坑记, 其中需要对.provision文件进行签名信息截取, 并生成.plist文件</p></blockquote><h3 id="method-ONE"><a href="#method-ONE" class="headerlink" title="method_ONE"></a>method_ONE</h3><h4 id="内容截取并保存临时文件中"><a href="#内容截取并保存临时文件中" class="headerlink" title="内容截取并保存临时文件中"></a>内容截取并保存临时文件中</h4><p>先看看.provision文字长什么样子, 我截取了其中一部分展示的信息,其中我们要的内容是从dict到dict之间<br><img src="/2017/11/14/plist文件-在脚本中的操作/all.png" alt=""><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">security cms -D -i ./original.mobileprovision | grep --after-context=20 "&lt;key&gt;Entitlements&lt;/key&gt;"  &gt; /tmp/tmp_provision</div></pre></td></tr></table></figure></p><p>读取匹配的信息,并保存到/tmp/tmp_provision这个文件中</p><h4 id="python进行正则匹配-过滤dict之后的内容"><a href="#python进行正则匹配-过滤dict之后的内容" class="headerlink" title="python进行正则匹配,过滤dict之后的内容"></a>python进行正则匹配,过滤dict之后的内容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">provision=`python -c "from re import findall,compile,S;data=open('/tmp/tmp_provision','r').read();print findall(compile(r'&lt;dict&gt;.*&lt;/dict&gt;',S),data)[0];"`</div></pre></td></tr></table></figure><h4 id="最后重定向到一个-plist文件中"><a href="#最后重定向到一个-plist文件中" class="headerlink" title="最后重定向到一个.plist文件中"></a>最后重定向到一个.plist文件中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo '&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;&lt;plist version="1.0"&gt;'$provision'&lt;/plist&gt;' &gt; Entitlements.plist</div></pre></td></tr></table></figure><blockquote><p>这个方法虽然可以, 但是其中第三部, 必须要格外注意字符的使用, 不然就格式不对,导致重定向出来的无法识别为.plist</p></blockquote><h3 id="method-TWO"><a href="#method-TWO" class="headerlink" title="method_TWO"></a>method_TWO</h3><h4 id="重定向为一个-plist"><a href="#重定向为一个-plist" class="headerlink" title="重定向为一个.plist"></a>重定向为一个.plist</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">security cms -D -i ./original.mobileprovision &gt; ProvisionProfile.plist</div></pre></td></tr></table></figure><p>查看到全部的信息, 重定向为一个ProvisionProfile.plist,还没有过滤</p><h4 id="提取内容生成"><a href="#提取内容生成" class="headerlink" title="提取内容生成"></a>提取内容生成</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/libexec/PlistBuddy -x -c "Print Entitlements" ProvisionProfile.plist &gt; Entitlements.plist</div></pre></td></tr></table></figure><p>直接将里面的子项Entitlements拿出来,生成一个新的Entitlements.plist</p><blockquote><p>这个方法比上面的稳妥不知道多少倍, 但是第一个的方法是自己钻研</p></blockquote><h3 id="plist文件的增删改查"><a href="#plist文件的增删改查" class="headerlink" title=".plist文件的增删改查"></a>.plist文件的增删改查</h3><p><img src="/2017/11/14/plist文件-在脚本中的操作/plutil.png" alt=""><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plutil -p ./ProvisionProfile.plist  #查看</div><div class="line">plutil -insert Insert -string "insert data here" ./ProvisionProfile.plist    #增</div><div class="line">plutil -replace Insert -string "change  data here" ./ProvisionProfile.plist  #替换</div></pre></td></tr></table></figure></p><blockquote><p>列举的就诸如此类,plutil是一个.plist官方推荐的好工具</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;背景是写一个自动签名的脚本, 真的是从0到1的踩坑记, 其中需要对.provision文件进行签名信息截取, 并生成.plist文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;method-ONE&quot;&gt;&lt;a href=&quot;#method-ON
      
    
    </summary>
    
      <category term="Unix" scheme="http://yoursite.com/categories/Unix/"/>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本中如何捕获异常</title>
    <link href="http://yoursite.com/2017/11/14/shell%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%A6%82%E4%BD%95%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2017/11/14/shell脚本中如何捕获异常/</id>
    <published>2017-11-14T10:56:50.000Z</published>
    <updated>2017-11-14T11:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在高级语言的时候,我们可以使用捕获异常的语句, 进行catch, 并和谐的处理, 但是shell是没有类似keyword的, 如何解决?<br>答案是 <code>#?</code> : <code>用于捕获上一条命令的状态,0的状态为正常,1为异常</code><br>自己在整理shell的时候遇到一些坑, 把它的规范列一下</p></blockquote><h3 id="和echo输出命令要注意"><a href="#和echo输出命令要注意" class="headerlink" title="#?和echo输出命令要注意"></a>#?和echo输出命令要注意</h3><p><img src="/2017/11/14/shell脚本中如何捕获异常/echo1.png" alt=""><br>这是一条echo输出命令,命令处于``之中,输出后执行. 但是命令是错误,执行的话会抛错误,也就是<code>echo $?</code>应该给到是1<br>但是看看执行结果:<br><img src="/2017/11/14/shell脚本中如何捕获异常/echo2.png" alt=""><br>看到输出的结果是0, 原因在于<code>echo</code>上, <code>echo</code>包了这一层命令, 只要<code>echo</code>直接将这命令打印在终端, 就是完整的完成工作,根本没有异常可言.</p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>当然是去除<code>echo</code>直接输出, 但是还是要注意的是, <code>$?</code>仅仅提示是上一条,这里必须十分谨慎.列下能捕获到异常:<br><img src="/2017/11/14/shell脚本中如何捕获异常/fix1.png" alt=""><br><img src="/2017/11/14/shell脚本中如何捕获异常/fix2.png" alt=""><br>可以看到输出是1了, 确认命令使用没问题后,就可以进行逻辑处理.</p><h3 id="避免"><a href="#避免" class="headerlink" title="避免"></a>避免</h3><p>这是完整的逻辑代码:<br><img src="/2017/11/14/shell脚本中如何捕获异常/full1.png" alt=""><br>更好的避免, 将允许的条件, 并到逻辑与:<br><img src="/2017/11/14/shell脚本中如何捕获异常/full2.png" alt=""></p><p><code>[shell大法好]</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在高级语言的时候,我们可以使用捕获异常的语句, 进行catch, 并和谐的处理, 但是shell是没有类似keyword的, 如何解决?&lt;br&gt;答案是 &lt;code&gt;#?&lt;/code&gt; : &lt;code&gt;用于捕获上一条命令的状态,0的状态为正常,1为异
      
    
    </summary>
    
      <category term="Unix" scheme="http://yoursite.com/categories/Unix/"/>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>OC中常用的延迟执行代码方法</title>
    <link href="http://yoursite.com/2017/11/08/OC%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/11/08/OC中常用的延迟执行代码方法/</id>
    <published>2017-11-08T11:12:41.000Z</published>
    <updated>2017-11-08T11:35:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写于篇头"><a href="#写于篇头" class="headerlink" title="写于篇头"></a>写于篇头</h3><blockquote><p>很多时候我们在代码中延迟执行代码, 情况分很多种,列一下我常用的在哪些情况</p></blockquote><h3 id="performSelector"><a href="#performSelector" class="headerlink" title="performSelector"></a>performSelector</h3><p><img src="/2017/11/08/OC中常用的延迟执行代码方法/1.png" alt=""></p><blockquote><p>很多时候用于延迟展示动画,例如转场动画等, 小延迟来产生的视觉误差,达到动画之美.  </p></blockquote><h3 id="NSTimer-scheduled"><a href="#NSTimer-scheduled" class="headerlink" title="NSTimer scheduled"></a>NSTimer scheduled</h3><p><img src="/2017/11/08/OC中常用的延迟执行代码方法/2.png" alt=""></p><blockquote><p>常用来一些页面的定时器, 例如一些App上的广告倒计时, NSTimer可以定时执行一些动作. 且repeats参数,可以决定这里的循环. </p></blockquote><p><img src="/2017/11/08/OC中常用的延迟执行代码方法/t2.png" alt=""></p><blockquote><p>注意Timer本身是被Runloop强引用的,所以如果是定义为property,用weak修饰.<br>然后可在<code>invalidate</code>中停止和销毁</p></blockquote><h3 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h3><p><img src="/2017/11/08/OC中常用的延迟执行代码方法/3.png" alt=""></p><blockquote><p>gcd中可以指定线程, 常用来做异步的处理,不阻塞主线的操作, 例如延迟网络加载so on. </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;写于篇头&quot;&gt;&lt;a href=&quot;#写于篇头&quot; class=&quot;headerlink&quot; title=&quot;写于篇头&quot;&gt;&lt;/a&gt;写于篇头&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;很多时候我们在代码中延迟执行代码, 情况分很多种,列一下我常用的在哪些情况&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
      <category term="Objective-C" scheme="http://yoursite.com/categories/Objective-C/"/>
    
    
      <category term="iosDev" scheme="http://yoursite.com/tags/iosDev/"/>
    
  </entry>
  
  <entry>
    <title>brewupgrade-提示ruby版本低</title>
    <link href="http://yoursite.com/2017/11/08/brewupgrade-%E6%8F%90%E7%A4%BAruby%E7%89%88%E6%9C%AC%E4%BD%8E/"/>
    <id>http://yoursite.com/2017/11/08/brewupgrade-提示ruby版本低/</id>
    <published>2017-11-08T10:40:41.000Z</published>
    <updated>2017-11-08T11:14:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="干嘛写"><a href="#干嘛写" class="headerlink" title="干嘛写?"></a>干嘛写?</h3><blockquote><p>mac自带了很多的开发环境,ruby python java so on~~, 但版本有时候低了, 又不能直接升级系统的这些,昨天brew upgrade的时候提示了ruby版本低,mark这个小tip</p></blockquote><h3 id="Error-like-that"><a href="#Error-like-that" class="headerlink" title="Error like that"></a>Error like that</h3><p><img src="/2017/11/08/brewupgrade-提示ruby版本低/tishi.png" alt=""></p><blockquote><p>你在<code>brew upgrade</code>的时候报了这样的错误</p></blockquote><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p><img src="/2017/11/08/brewupgrade-提示ruby版本低/old_version.png" alt=""></p><blockquote><p>官网都到2.4+了,确实older</p></blockquote><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><p><img src="/2017/11/08/brewupgrade-提示ruby版本低/which_ruby.png" alt=""></p><blockquote><p>因为是系统自带,which看到是在/usr/bin/下的</p></blockquote><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><img src="/2017/11/08/brewupgrade-提示ruby版本低/resove.png" alt=""></p><blockquote><p>可以试试, 两行, 完美解决,当然也会有解决不了的, 往下看</p></blockquote><h3 id="怎么解决的"><a href="#怎么解决的" class="headerlink" title="怎么解决的?"></a>怎么解决的?</h3><p><img src="/2017/11/08/brewupgrade-提示ruby版本低/find.png" alt=""></p><blockquote><p>可以从结果完美运行知道, brew 运行的时候不会指定要哪个目录下的ruby,直接是ruby —</p><p>没有解决的是什么情况呢? 这时候你which ruby看到的应该与我不同, 它依然显示是/usr/bin/下面的</p><p>因为 <code>[环境变量在同样名词的情况下, 是会存在覆盖的. ]</code>, 你可以打开你的.bash_profile 或 .zshrc 配置文件下, export PATH=<strong>*</strong>, 是不是把/usr/local/bin/ 的顺序, 放在了/usr/bin的前面了. </p></blockquote><h3 id="mac大法好"><a href="#mac大法好" class="headerlink" title="mac大法好"></a>mac大法好</h3><blockquote><p>小tip,没什么料, 点点滴滴点点</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;干嘛写&quot;&gt;&lt;a href=&quot;#干嘛写&quot; class=&quot;headerlink&quot; title=&quot;干嘛写?&quot;&gt;&lt;/a&gt;干嘛写?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;mac自带了很多的开发环境,ruby python java so on~~, 但版本有时候低了, 又
      
    
    </summary>
    
      <category term="Unix" scheme="http://yoursite.com/categories/Unix/"/>
    
    
      <category term="brewupgradeError" scheme="http://yoursite.com/tags/brewupgradeError/"/>
    
  </entry>
  
  <entry>
    <title>验证码识别整理</title>
    <link href="http://yoursite.com/2017/11/05/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2017/11/05/验证码识别整理/</id>
    <published>2017-11-05T07:48:39.000Z</published>
    <updated>2017-11-06T11:24:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最近兴趣蔓延-打算对一验证码进行攻破识别-这也是爬虫高阶的课程-于是乎找了些资料-这里总结一下"><a href="#最近兴趣蔓延-打算对一验证码进行攻破识别-这也是爬虫高阶的课程-于是乎找了些资料-这里总结一下" class="headerlink" title="最近兴趣蔓延, 打算对一验证码进行攻破识别,这也是爬虫高阶的课程. 于是乎找了些资料, 这里总结一下."></a>最近兴趣蔓延, 打算对一验证码进行攻破识别,这也是爬虫高阶的课程. 于是乎找了些资料, 这里总结一下.</h3><h3 id="验证码识别的大杀器是tesseract君"><a href="#验证码识别的大杀器是tesseract君" class="headerlink" title="验证码识别的大杀器是tesseract君"></a>验证码识别的大杀器是<code>tesseract</code>君</h3><p><img src="/2017/11/05/验证码识别整理/tesseract.png" alt="tesseract"><br><a href="http://www.zmonster.me/2015/04/17/tesseract-install-usage.html" target="_blank" rel="external">tesseract指南中文版-link</a></p><h3 id="但是它处理的能力有限-对于验证码图片咱们必须先走一篇预处理流程后再扔给它-安装tesseract也就是一行brew的事情"><a href="#但是它处理的能力有限-对于验证码图片咱们必须先走一篇预处理流程后再扔给它-安装tesseract也就是一行brew的事情" class="headerlink" title="但是它处理的能力有限, 对于验证码图片咱们必须先走一篇预处理流程后再扔给它. 安装tesseract也就是一行brew的事情"></a>但是它处理的能力有限, 对于验证码图片咱们必须先走一篇预处理流程后再扔给它. 安装tesseract也就是一行brew的事情</h3><p><img src="/2017/11/05/验证码识别整理/tesseract_install.png" alt="tesseract"></p><h3 id="预处理常规有哪些呢"><a href="#预处理常规有哪些呢" class="headerlink" title="预处理常规有哪些呢?"></a>预处理常规有哪些呢?</h3><ul><li>灰度化</li><li>二值化</li><li>去除干扰线</li></ul><h3 id="图片处理库"><a href="#图片处理库" class="headerlink" title="图片处理库"></a>图片处理库</h3><p> Pillow (简称PIL)是一个强大的图片处理库, 具体的文档和官方网站可参考<br><a href="https://pillow.readthedocs.io/en/latest/index.html" target="_blank" rel="external">Pillow文档</a> - <a href="https://python-pillow.org/" target="_blank" rel="external">Pillow官网</a> - <a href="https://github.com/python-pillow/Pillow" target="_blank" rel="external">Pillow_GitHub</a><br><img src="/2017/11/05/验证码识别整理/pil_install.png" alt="安装方法"></p><h3 id="灰度化"><a href="#灰度化" class="headerlink" title="灰度化"></a>灰度化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#example_image = Image.open('/tmp/example.png')   #打开一张图片</span></div><div class="line">gray_image = example_image.convert(<span class="string">"L"</span>)</div></pre></td></tr></table></figure><p>convert传入model=”L”的时候, 会转换图片的RGB,返回一张灰度的图片<br><img src="/2017/11/05/验证码识别整理/model_L.png" alt=""></p><h3 id="二值化"><a href="#二值化" class="headerlink" title="二值化"></a>二值化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarizing_image</span><span class="params">(gray_image,threshold)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    传入一张灰度图,进行二值化处理</span></div><div class="line"><span class="string">    :param gray_image: convert之后的灰度图</span></div><div class="line"><span class="string">    :param threshold:二值化阈值, 我对我的目标图片进行不同尝试,发现`180`的时候能拿到比较理想的值</span></div><div class="line"><span class="string">    :return: 二值化后的图片</span></div><div class="line"><span class="string">    """</span></div><div class="line">    pixel_data = gray_image.load()</div><div class="line">    w, h = gray_image.size</div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(h):</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(w):</div><div class="line">            <span class="keyword">if</span> pixel_data[x, y] &lt; threshold:</div><div class="line">                pixel_data[x, y] = <span class="number">0</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                pixel_data[x, y] = <span class="number">255</span></div><div class="line">    <span class="keyword">return</span> gray_image</div></pre></td></tr></table></figure><p>以该阈值为分界划分黑白, 查了下拿到的资料, 有设置为127的, 160的, 以哪种为标准呢? 个人觉得是想要的验证码比较清晰的程度就可以了, 这一块你可以多试试, 我尝试在120-180的区间给到的都比较满意. </p><h3 id="去除干扰线"><a href="#去除干扰线" class="headerlink" title="去除干扰线"></a>去除干扰线</h3><p>这里的方法看到不少,参考简书的作者比较粗暴的方式进行了处理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">depoint</span><span class="params">(binarizing_image)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    对于像素值&gt;245的邻域像素，判别为属于背景色，\</span></div><div class="line"><span class="string">    如果一个像素上下左右4各像素值有超过2个像素属于背景色，那么该像素就是噪声。</span></div><div class="line"><span class="string">    jianshu_link: "http://www.jianshu.com/p/41127bf90ca9"</span></div><div class="line"><span class="string">    :param binarizing_image:</span></div><div class="line"><span class="string">    :return:</span></div><div class="line"><span class="string">    """</span></div><div class="line">    pixdata = binarizing_image.load()</div><div class="line">    w,h = binarizing_image.size</div><div class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>,h<span class="number">-1</span>):</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,w<span class="number">-1</span>):</div><div class="line">            count = <span class="number">0</span></div><div class="line">            <span class="keyword">if</span> pixdata[x,y<span class="number">-1</span>] &gt; <span class="number">245</span>:</div><div class="line">                count = count + <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> pixdata[x,y+<span class="number">1</span>] &gt; <span class="number">245</span>:</div><div class="line">                count = count + <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> pixdata[x<span class="number">-1</span>,y] &gt; <span class="number">245</span>:</div><div class="line">                count = count + <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> pixdata[x+<span class="number">1</span>,y] &gt; <span class="number">245</span>:</div><div class="line">                count = count + <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> count &gt; <span class="number">2</span>:</div><div class="line">                pixdata[x,y] = <span class="number">255</span></div><div class="line">    <span class="keyword">return</span> binarizing_image</div></pre></td></tr></table></figure></p><h3 id="处理后的图片转文字"><a href="#处理后的图片转文字" class="headerlink" title="处理后的图片转文字"></a>处理后的图片转文字</h3><p>图片转文字实际就是文章开头的tesseract , 不过大牛把它集成在pytesser这个库中,我们命令的调用方法如下:<br><img src="/2017/11/05/验证码识别整理/out_put.png" alt=""></p><p>化繁为简,pytesser一行代码告诉你文字中的图片, 当然前提是必须要安装tesseract<br>用法如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#图片文件直接转</span></div><div class="line"><span class="keyword">print</span> pytesser.image_file_to_string(<span class="string">'after_revole_image.jpg'</span>) </div><div class="line"><span class="comment">#这是PIL打开后的图片</span></div><div class="line"><span class="keyword">print</span> pytesser.image_to_string(image)</div></pre></td></tr></table></figure></p><p><a href="http://code.google.com/p/pytesser/" target="_blank" rel="external">pytesser-下载链接</a> - <a href="https://my.oschina.net/jhao104/blog/647326" target="_blank" rel="external">pytesser安装遇到坑?</a></p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性?"></a>局限性?</h3><p>简单的图片,识别率可破50%, 稍微复杂的图片, 基本是挂彩的. 有解决方案吗? 看到AI训练的模式可以较强的处理 . 这是一个方向. </p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="http://www.jianshu.com/p/41127bf90ca9" target="_blank" rel="external">http://www.jianshu.com/p/41127bf90ca9</a><br><a href="http://aducode.github.io/posts/2014-07-08/python_identification_verification_code.html" target="_blank" rel="external">http://aducode.github.io/posts/2014-07-08/python_identification_verification_code.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;最近兴趣蔓延-打算对一验证码进行攻破识别-这也是爬虫高阶的课程-于是乎找了些资料-这里总结一下&quot;&gt;&lt;a href=&quot;#最近兴趣蔓延-打算对一验证码进行攻破识别-这也是爬虫高阶的课程-于是乎找了些资料-这里总结一下&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="verificationCode" scheme="http://yoursite.com/tags/verificationCode/"/>
    
  </entry>
  
  <entry>
    <title>instruments命令行监控</title>
    <link href="http://yoursite.com/2017/10/31/instruments%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9B%91%E6%8E%A7/"/>
    <id>http://yoursite.com/2017/10/31/instruments命令行监控/</id>
    <published>2017-10-31T13:11:26.000Z</published>
    <updated>2017-11-06T11:25:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>周日的时候去听了一段小分享, 内容还算精彩, 把Android在性能监控方面,自动化方面,设备独立运行自动化都能讲解的很棒. adb这个原生的轮子确实很棒.(也是要root权限) </em></p><p><em>遗憾的是ios方面的在我当前涉及的圈子,发现能去这样子做, 并且开源出来的很少(我知道你们会说越狱就能解决一切问题, 那我沉默).   ios性能, 手动可以通过instrument来监控, 想做的就是全面的性能自动化监控, 提取出instrument的数据来完成性能的监控,完成对app某迭代阶段, 或者整个app周期的性能走势.</em></p><p><code>&lt;!---------------我是内容分割线---------------------------------------&gt;</code></p><h3 id="what’s-instruments"><a href="#what’s-instruments" class="headerlink" title="what’s  instruments"></a>what’s  instruments</h3><p>instruments是instrument命令行的工具, 在执行自动化的我们需要它来监控程序拿到数据.</p><h3 id="如何启动"><a href="#如何启动" class="headerlink" title="如何启动:"></a>如何启动:</h3><p><img src="/2017/10/31/instruments命令行监控/cap.png" alt=""></p><ul><li>-w           “UUID” 这里是真机的uuid</li><li>-t            “template”   后缀是.tracetemplace , 是想要录制的模板,整个在下面详解</li><li>-D           “save_trace”  完成录制后存储的位置, 为.trace文件, 与普通录制一致</li><li>App的bunldeID </li><li>-v           看help, 是说记录日志的,实际也没看到打印日志</li></ul><h3 id="现在我们如何拿到-tracetemplace录制模板-和-录制能保存的-trace文件呢"><a href="#现在我们如何拿到-tracetemplace录制模板-和-录制能保存的-trace文件呢" class="headerlink" title="现在我们如何拿到.tracetemplace录制模板 和 录制能保存的.trace文件呢?"></a>现在我们如何拿到.tracetemplace录制模板 和 录制能保存的.trace文件呢?</h3><p>其实很简单~  可惜我踩了一些坑才过来.<br>首先启动instrument app -&gt; 空模板 -&gt;  右上角新增想要的录制的模板(想说的是, 理论上是全部都可以录制, 自己挖坑跳跳才知道) .<br><img src="/2017/10/31/instruments命令行监控/add_tem.png" alt=""></p><p>左上角File -&gt; SaveAsTemplate , 存储, 拿到录制模板<code>.tracetemplace</code> :<br><img src="/2017/10/31/instruments命令行监控/as_tem.png" alt=""><br>Command+S, 存储, 拿到录制结束后, 会存储的<code>.trace</code>;</p><blockquote><p>这里为什么要这样子执行, 因为要保证.trace 和 .tracetemplace 一致,才能保存录制结果</p></blockquote><h3 id="拿到设备的UUID"><a href="#拿到设备的UUID" class="headerlink" title="拿到设备的UUID"></a>拿到设备的UUID</h3><p><code>instruments -s</code>可以拿到, 或者<code>xcrun simctl list</code> (是活动的设备会在后面提示(Booted)) </p><h3 id="如果你连bundleID都不知道"><a href="#如果你连bundleID都不知道" class="headerlink" title="如果你连bundleID都不知道~"></a>如果你连bundleID都不知道~</h3><p><code>ios-deploy -B</code>可以拿到连接设备的全部bundleID , 如果你的电脑没有ios-deploy, <code>brew install ios-deplo</code>, 大多情况下我这一步是啰嗦了.</p><h3 id="其他部分instruments-参数参考"><a href="#其他部分instruments-参数参考" class="headerlink" title="其他部分instruments 参数参考"></a>其他部分instruments 参数参考</h3><p><img src="/2017/10/31/instruments命令行监控/guide_all.png" alt=""></p><h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题?"></a>遗留问题?</h3><p>我尚未在模拟器上运行成功,  希望有运行成功的联系交流. </p><h2 id="拿到以上的数据后-就可以按照我最上面的参数拼接启动了-Xcode8-完美运行"><a href="#拿到以上的数据后-就可以按照我最上面的参数拼接启动了-Xcode8-完美运行" class="headerlink" title="拿到以上的数据后, 就可以按照我最上面的参数拼接启动了, Xcode8 完美运行"></a>拿到以上的数据后, 就可以按照我最上面的参数拼接启动了, Xcode8 完美运行</h2><h2 id="后序呢-怎么实现title上的想法"><a href="#后序呢-怎么实现title上的想法" class="headerlink" title="后序呢? 怎么实现title上的想法"></a>后序呢? 怎么实现title上的想法</h2><p>有接触一篇github, 作者似乎是逆向实现了,但代码也好久没更新了, 但是我本地暂未成功解析<br><a href="https://github.com/Qusic/TraceUtility" target="_blank" rel="external">TraceUtility</a><br><a href="https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0ahUKEwjyiabL65rXAhWBsJQKHa0WDLgQFgglMAA&amp;url=http%3a%2f%2fwww%2ecnblogs%2ecom%2fhyddd%2fp%2f5329608%2ehtml&amp;usg=AOvVaw2PasSIoEIDhnu52mlh62bt" target="_blank" rel="external">博文地址</a></p><h2 id="序已经开始了-目前的OC还没接触逆向-现在这一枪打响了"><a href="#序已经开始了-目前的OC还没接触逆向-现在这一枪打响了" class="headerlink" title="序已经开始了,目前的OC还没接触逆向,  现在这一枪打响了~~"></a>序已经开始了,目前的OC还没接触逆向,  现在这一枪打响了~~</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;周日的时候去听了一段小分享, 内容还算精彩, 把Android在性能监控方面,自动化方面,设备独立运行自动化都能讲解的很棒. adb这个原生的轮子确实很棒.(也是要root权限) &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;遗憾的是ios方面的在我当前涉及的圈子,发现能去这样
      
    
    </summary>
    
      <category term="Unix" scheme="http://yoursite.com/categories/Unix/"/>
    
    
      <category term="testTools" scheme="http://yoursite.com/tags/testTools/"/>
    
  </entry>
  
  <entry>
    <title>git 命令行上的常规操作</title>
    <link href="http://yoursite.com/2017/10/31/git-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8A%E7%9A%84%E5%B8%B8%E8%A7%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/10/31/git-命令行上的常规操作/</id>
    <published>2017-10-31T09:14:24.000Z</published>
    <updated>2017-11-08T10:36:37.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="git-clone-git的URL"><a href="#git-clone-git的URL" class="headerlink" title="git clone git的URL"></a>git clone git的URL</h5><blockquote><p>thanks github, open the door which share of code in the world</p></blockquote><h5 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h5><blockquote><p>初始化是新建的第一步<br><img src="/2017/10/31/git-命令行上的常规操作/init.png" alt=""></p></blockquote><h5 id="git-add-lt-文件-gt"><a href="#git-add-lt-文件-gt" class="headerlink" title="git add &lt;文件&gt;"></a>git add &lt;文件&gt;</h5><blockquote><p>第二部, 任何时候仓库中新增了某个文件,都需要add, 后面跟随文件.  可以精准到某个文件, 也可以指定某个文件夹,亦或者”.”,当前目录全部文件<br><img src="/2017/10/31/git-命令行上的常规操作/add.png" alt=""></p></blockquote><h5 id="git-commit-m-“message”"><a href="#git-commit-m-“message”" class="headerlink" title="git commit -m “message”"></a>git commit -m “message”</h5><h5 id="git-commit-m-“message”-lt-文件-gt"><a href="#git-commit-m-“message”-lt-文件-gt" class="headerlink" title="git commit -m “message” &lt;文件&gt;"></a>git commit -m “message” &lt;文件&gt;</h5><blockquote><p>第一种情况, 相对于前面add之后的commit, 默认提前当前的全部修改.<br>第二种情况, 只是更改某些个文件, commit特定的文件<br><img src="/2017/10/31/git-命令行上的常规操作/commit.png" alt=""></p></blockquote><p>#####git push</p><blockquote><p>git push是全部修改之后的提交代码操作, 默认是master主分支<br><img src="/2017/10/31/git-命令行上的常规操作/push.png" alt=""></p><h5 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h5><p>同步代码,默认是master<br><img src="/2017/10/31/git-命令行上的常规操作/pull.png" alt=""></p><h5 id="git-rm-lt-文件-gt"><a href="#git-rm-lt-文件-gt" class="headerlink" title="git rm &lt;文件&gt;"></a>git rm &lt;文件&gt;</h5><p>记住在本地移除后, 然后git commit -m “为啥移除” &amp;&amp; git push</p></blockquote><h5 id="and-more-请别让你的英文太烂"><a href="#and-more-请别让你的英文太烂" class="headerlink" title="and more , 请别让你的英文太烂"></a>and more , 请别让你的英文太烂</h5><p><img src="/2017/10/31/git-命令行上的常规操作/more.png" alt=""></p><h2 id="文章是从CSDN迁移过来的"><a href="#文章是从CSDN迁移过来的" class="headerlink" title="文章是从CSDN迁移过来的"></a>文章是从CSDN迁移过来的</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;git-clone-git的URL&quot;&gt;&lt;a href=&quot;#git-clone-git的URL&quot; class=&quot;headerlink&quot; title=&quot;git clone git的URL&quot;&gt;&lt;/a&gt;git clone git的URL&lt;/h5&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="Unix" scheme="http://yoursite.com/categories/Unix/"/>
    
    
      <category term="gitCommand" scheme="http://yoursite.com/tags/gitCommand/"/>
    
  </entry>
  
  <entry>
    <title>我怎么从0到1搭建了这个hexo-blog</title>
    <link href="http://yoursite.com/2017/10/31/%E6%88%91%E6%80%8E%E4%B9%88%E4%BB%8E0%E5%88%B01%E6%90%AD%E5%BB%BA%E4%BA%86%E8%BF%99%E4%B8%AAhexo-blog/"/>
    <id>http://yoursite.com/2017/10/31/我怎么从0到1搭建了这个hexo-blog/</id>
    <published>2017-10-31T08:46:58.000Z</published>
    <updated>2017-11-06T11:24:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本blog从10月份的最后一天,从中午12:30 - 15:52,历经3 x 60m + 22m完成, 写篇我怎么搭好了这个坑.</strong><br>首先感谢下我的好哥们 <a href="https://sherlockz.github.io/" target="_blank" rel="external">@locker </a>兄.</p><p>参考博文:<a href="http://www.jianshu.com/p/6a330b1cc29d" target="_blank" rel="external">http://www.jianshu.com/p/6a330b1cc29d</a></p><h3 id="git-a-new-repositories"><a href="#git-a-new-repositories" class="headerlink" title="git a new repositories"></a>git a new repositories</h3><p>其实名字你开心就好~  ,新建后进入该repositories 的settings,<br>如下图:<br><img src="/2017/10/31/我怎么从0到1搭建了这个hexo-blog/cap_gitSite.png" alt=""></p><h3 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h3><p> 这个我的电脑从代码生涯开始它就存在,不累赘.</p><h3 id="noje-js-npm"><a href="#noje-js-npm" class="headerlink" title="noje.js(npm)"></a>noje.js(npm)</h3><p>目前国内访问的话,网速很蜗牛,我安装的时候用的是公司的镜像.另外hexo在后面的init中, 会默认调用npm下载初始化用的部分零件, 如果你找到好的镜像,我建议直接跟我一样,直接把npm替换掉.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config set registry &lt;镜像地址&gt;</div></pre></td></tr></table></figure><h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo    #安装最新版本</div></pre></td></tr></table></figure><p>然后切换建议是切换到一个你觉得OK的目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo init                       #初始化,会再次下载文件</div><div class="line">npm install                     #下载包依赖</div></pre></td></tr></table></figure><h3 id="配置ssh连接"><a href="#配置ssh连接" class="headerlink" title="配置ssh连接"></a>配置ssh连接</h3><p>博文中是有要求配置ssh,但我因为是第一次踩坑后重来的, 直接使用了https, 若您有时间,我也建议你使用ssh. 可参考上面的博文, 需要提示的是new一个ssh-key, 需要到github对应的邮箱确认下. 本地ssh绑定的邮箱也需要和github一致.</p><h3 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h3><p>在hexo的文件下, 有个<code>_config.yml</code> ,这里是hexo的基本配置,下拉到最下面, 如果你是跟我一样对markdown接触不多的, 请务必注意<code>:</code>之后的空格</p><ul><li>type: git</li><li>repo: 这里是你刚才新建的那个https–.git地址 . ssh的话则是ssh</li><li>branch: master</li></ul><p><img src="/2017/10/31/我怎么从0到1搭建了这个hexo-blog/settings.png" alt=""></p><h3 id="选个酷点的主题"><a href="#选个酷点的主题" class="headerlink" title="选个酷点的主题"></a>选个酷点的主题</h3><p> <a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">主题选择连接 </a><br> 链接后面附demo了, 看看哪种比较酷, Copy 它的git地址执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone &lt;git地址&gt;  theme/&lt;主题名称&gt;</div></pre></td></tr></table></figure><p>以此为例:<br><img src="/2017/10/31/我怎么从0到1搭建了这个hexo-blog/theme.png" alt=""> </p><p>然后在<code>_config.yml</code>中修改<code>theme: &lt;主题名称&gt;</code></p><h3 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure><h3 id="加载hexo"><a href="#加载hexo" class="headerlink" title="加载hexo"></a>加载hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g -d    #generate静态文件,提交deploy</div></pre></td></tr></table></figure><h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s      #hexo server 可以映射到本地端口查看效果</div></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>访问的地址是 githubUserName.github.io<br>如我的github name是paulswith, 地址即为<a href="https://paulswith.github.io" target="_blank" rel="external">https://paulswith.github.io</a></p><h3 id="mark下哪些坑"><a href="#mark下哪些坑" class="headerlink" title="mark下哪些坑"></a>mark下哪些坑</h3><p> 1 . 修改头像问题, 请直接copy文件到<br><code>theme/主题名字/source/images/default_avatar.jpg</code> 替换此文件<br> 2 . 配置项的title之类的没有生效? 参考<br><img src="/2017/10/31/我怎么从0到1搭建了这个hexo-blog/config_title.png" alt=""><br> 3 . 要忍受Hexo提供的图片语法? <a href="https://www.tuicool.com/articles/umEBVfI" target="_blank" rel="external">https://www.tuicool.com/articles/umEBVfI</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;本blog从10月份的最后一天,从中午12:30 - 15:52,历经3 x 60m + 22m完成, 写篇我怎么搭好了这个坑.&lt;/strong&gt;&lt;br&gt;首先感谢下我的好哥们 &lt;a href=&quot;https://sherlockz.github.io/&quot; ta
      
    
    </summary>
    
      <category term="WEB" scheme="http://yoursite.com/categories/WEB/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/31/hello-world/"/>
    <id>http://yoursite.com/2017/10/31/hello-world/</id>
    <published>2017-10-31T07:36:01.000Z</published>
    <updated>2017-10-31T07:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
